<!--
 * @Description:
 * @Author: FYT1996
 * @Date: 2023-08-16 09:21:16
 * @LastEditor: FYT1996
 * @LastEditTime: 2024-01-03 16:51:16
 * @Copyright: by 南阳迈特网络科技有限公司 禁止任何形式（包含二次开发）转售系统源码，违者必究。
-->


<template>
	<view class="page_content safe-padding">
		<view class="head_content" v-if="!isDrag">
			<CustomNavbar :lText="isVideoToEnd ? '' : `${videoData.length ? videoData[videoIndex].name : ''}`" color="#fff"></CustomNavbar>
		</view>
		<view class="main_content" :style="[{ paddingTop: barHeight + 'px' }]">
			<view class="swiper" id="swiper" @touchstart="touchStart" @touchmove="touchMove" @touchend="touchEnd">
				<view class="swiper_item" :style="[{ height: swiperHeight + 'px' }, swiperTransform]" v-for="(item, index) in videoData" :key="index">
					<view class="videos" v-if="videoIndex == index">
						<video class="video" v-if="!isNeedToPay" :id="'vplayer' + index" :ref="'vplayer' + index"
							:loop="false" :controls="false" :autoplay="videoIndex == index" object-fit="cover"
							:enable-progress-gesture="true"  :show-center-play-btn="false"  :src="item.url"
							@play="isPlaying = true, isPlayError = false" @pause="isPlaying = false"  @ended="videoEnded"
							@error="videoError" @timeupdate="videoTimeUpdate" @click="videoClick">
						</video>
						<view class="verror" :style="[{ height: swiperHeight + 'px' }]" v-if="isPlayError && item.url">
							<image class="image" :src="videoInfo.cover" mode="aspectFill"></image>
							<view class="content">
								<u-icon name="info-circle-fill" color="#fff" size="50"></u-icon>
								<text class="text">{{ getApp.$t('video.error') }}</text>
							</view>
						</view>
					</view>
					<view class="vcover" v-else>
						<image class="image" :src="videoInfo.cover" mode="aspectFill"></image>
					</view>
					<view class="buttons" v-if="!isDrag && !isNeedToPay && !isPlayError && videoIndex == index" @click="videoPlay">
						<u-icon v-if="!isPlaying" name="play-right-fill" color="rgba(255, 255, 255, 0.8)" :size="60"></u-icon>
					</view>
					<view class="sidebar" v-if="!isDrag && !isNeedToPay && videoIndex == index">
						<view class="item" @click="handleLikes(item.id, index)">
							<image class="image" :src="`https://img.nymaite.com/video_short/icons/likes_${item.is_like ? 1 : 0 }.png`" mode="widthFix"></image>
							<text class="text" :class="{ active: item.is_like }">{{ item.likes }}</text>
						</view>
						<view class="item" @click="handleCollect">
							<!-- <image class="image" :src="`https://img.nymaite.com/video_short/icons/collect_${videoInfo.isCollect ? 1 : 0 }.png`" mode="widthFix"></image> -->
							<u-icon name="star-fill" :color="videoInfo.isCollect ? '#E17B37' : '#F5F5F5'" size="32"></u-icon>
							<text class="text" :class="{ active: videoInfo.isCollect }">{{ videoInfo.collect }}</text>
						</view>
					</view>
					<view class="progress" v-if="!isNeedToPay && duration > 0 && videoIndex == index">
						<view class="bar" :style="{ width: progressBar + 'px' }"></view>
					</view>
				</view>
			</view>
			<view class="infobox" v-if="!isDrag && !isNeedToPay && videoData.length">
				<view class="content" style="justify-content: space-between; align-items: center;">
					<view class="left" style="flex:none">
						<text class="text1">{{ videoInfo.title }}</text>
					</view>
					<text class="right" :style="'color:' + global.isColor" @click="isShowMenu = true">{{ getApp.$t('play.select') }}</text>
				</view>
			</view>
		</view>
		<view class="vmask" v-if="isNeedToPay" :style="[{ height: winHeight + 'px' }]" @touchmove.stop="">
			<image class="bg" :src="videoInfo.cover" mode="aspectFill"></image>
			<view class="centerinfo" :style="[{ top: winHeight / 2 + 'px' }]">
				<text class="text">{{ getApp.$t('play.paid') }}</text>
				<text class="btn" :style="'background:' + global.isColor" @click="unlockPlot">{{ getApp.$t('play.unlock') }}</text>
			</view>
			<view class="infobox" v-if="!isDrag">
				<view class="content">
					<view class="left">
						<text class="text1">{{ videoInfo.title }}</text>
					</view>
					<text class="right" :style="'color:' + global.isColor" @click="isShowMenu = true">{{ getApp.$t('play.select') }}</text>
				</view>
			</view>
		</view>
		<view class="vmask loading" v-if="isLoading && !isNeedToPay" :style="[{ height: winHeight + 'px' }]" @touchmove.stop="">
			<image class="bg" :src="videoInfo.cover" mode="aspectFill"></image>
			<view class="centerinfo" :style="[{ top: winHeight / 2 + 'px' }]">
				<u-loading-icon mode="circle" :size="30"></u-loading-icon>
			</view>
		</view>
		<view class="vmask" v-if="isVideoToEnd" :style="[{ height: winHeight + 'px' }]" @touchmove.stop="">
			<image class="bg" :src="videoInfo.cover" mode="aspectFill"></image>
			<view class="centerinfo" :style="[{ top: winHeight / 2 + 'px' }]">
				<text class="text">{{ getApp.$t('play.finish') }}</text>
				<text class="btn"  :style="'background:' + global.isBgColor"  @click="isShowRecommend = true">{{ getApp.$t('text.recommend') }}</text>
			</view>
			<view class="infobox" v-if="!isDrag">
				<view class="content">
					<view class="left">
						<text class="text1">{{ videoInfo.title }}</text>
					</view>
					<text class="right" :style="'color:' + global.isColor" @click="isShowMenu = true">{{ getApp.$t('play.select') }}</text>
				</view>
			</view>
		</view>
		<VideoMenu :show="isShowMenu" :data="originData" :current="originIndex"
			:info="{ title: videoInfo.title, length: videoInfo.length }"
			@selected="changeOriginIndex" @close="isShowMenu = false" @showpay="isShowPay = true">
		</VideoMenu>
		<VideoPay :show="isShowPay" :price="currentPrice" @close="isShowPay = false"></VideoPay>
		<VideoRecommend :show="isShowRecommend" @close="isShowRecommend = false"></VideoRecommend>
		<u-notify ref="uNotify"></u-notify>
	</view>
</template>

<script>
	import CustomNavbar from '@/components/CustomNavbar.vue'
	import VideoMenu from './components/VideoMenu.nvue'
	import VideoPay from './components/VideoPay.nvue'
	import VideoRecommend from './components/VideoRecommend.nvue'
	import { mapState, mapGetters, mapMutations, mapActions } from "vuex"
	export default {
		components: { CustomNavbar, VideoMenu, VideoPay, VideoRecommend },
		data() {
			return {
				global: getApp().globalData,
				getApp: getApp(),
				
				winWidth: 0, // 窗口宽度
				winHeight: 0, // 窗口高度
				swiperHeight: 0, // swiper高度
				progressBar: 0, // 播放进度
				barHeight: uni.getSystemInfoSync().statusBarHeight,
				
				currentTime: 0, // 当前视频播放进度
				currentPrice: 0, // 当前视频积分
				prevTime: 0, // 上次视频进度

				duration: 0, // 当前视频总时长
				isDrag: false, // 拖动进度条状态
				dragStarTime: "00:00", // 拖拽开始时长
				dragEndTime: "00:00", // 拖拽结束时长
				
				isPlaying: true, // 播放状态
				isVideoToEnd: false, // 剧集播放完毕
				
				clickNum: 0, // 点击次数
				clickTimer: null, // 点击定时器

				isShowMenu: false, // 显示菜单
				isShowPay: false, // 显示支付
				isShowRecommend: false, // 显示推荐
				
				isNeedToPay: false, // 需要支付
				isLoading: true, // 加载中
				isPlayError: false, // 播放错误

				originData: [], // 源数据
				originIndex: 0, // 源数据索引
				oldIndex: 0, // 源数据上一次索引
				
				videoInfo: { id: '', title: '', cover: '', length: '', collect: 0, isCollect: 0, share: 0 },
				videoData: [], // 渲染数据
				videoIndex: 0, // 渲染数据索引
				
				touchStartX: 0, // 触摸时的x原点
				touchStartY: 0, // 触摸时的y原点
				touchTime: 0, // 时间记录，用于滑动时且时间小于1s则执行左右滑动
				touchInterval: '', // 记录/清理时间记录
				touchMoveX: 0, // x轴方向移动的距离
				touchMoveY: 0, // y轴方向移动的距离
				direction: 'all', // 切换方向
				distance: 50, // 触发距离
				touchEndX: 0, // 触摸结束x原点
				touchEndY: 0, // 触摸结束y原点
			}
		},
		computed: {
			...mapGetters("user", ["token", "userInfo"]),
			...mapGetters("app", []),
			swiperTransform() {
				const v = this.videoIndex == 0 ? 0 : this.videoIndex == 1 ? -100 : this.videoIndex == 2 ? -200 : 0
				return {
					transform: `translateY(${v}%)`
				}
			},
		},
		watch: {
			// 付费
			isNeedToPay(newValue, oldValue) {
				if(newValue) {
					this.isShowPay = true
				}
			}
		},
		onLoad(option) {
			if(option.id) (this.videoInfo.id = option.id), this.getVideoMenu()
		},
		onUnload() {
			this.saveVideoProgress()
		},
		onHide() {
			this.saveVideoProgress()
		},
		onReady() {
			this.winWidth = uni.getSystemInfoSync().windowWidth
			this.winHeight = uni.getSystemInfoSync().windowHeight
			const timer = setTimeout(() => {
				uni.createSelectorQuery().select('#swiper').boundingClientRect((res)=>{
					this.swiperHeight = res.height
				}).exec()
				clearTimeout(timer)
			}, 300)
		},
		methods: {
			// 切换视频
			changeCurrent(val) {
				let current = this.videoIndex
				if(val === 'prev') {
					if(current == 0) current = 2
					else current --
					const obj = { detail: { current } }
					this.swiperChange(obj)
				} else if(val === 'next') {
					if(current < 2) current ++
					else current = 0
					const obj = { detail: { current } }
					this.swiperChange(obj)
				}
			},
			// 触摸开始事件
			touchStart(e) {
				this.touchStartX = e.changedTouches[0].pageX; // 获取触摸时的原点
				this.touchStartY = e.changedTouches[0].pageY; // 获取触摸时的原点
				// 使用js计时器记录时间
				clearInterval(this.touchInterval); // 清除setInterval
				this.touchTime = 0;
				this.touchInterval = setInterval(() => {
					this.touchTime ++;
				}, 100);
			},
			// 触摸移动事件
			touchMove(e) {
				// this.touchMoveX = e.changedTouches[0].pageX;
				// this.touchMoveY = e.changedTouches[0].pageY;
			},
			// 触摸结束事件
			touchEnd(e) {
				this.touchEndX = e.changedTouches[0].pageX;
				this.touchEndY = e.changedTouches[0].pageY;
				
				let moveX = this.touchEndX - this.touchStartX;
				let moveY = this.touchEndY - this.touchStartY;
				
				if (Math.sign(moveX) == -1) {
					moveX = moveX * -1;
				}
				if (Math.sign(moveY) == -1) {
					moveY = moveY * -1;
				}
				if (2 * moveX <= moveY) {
					// 上下
					if (this.direction != 'all' && this.direction != 'vertical') return;
					// 向上滑动
					if (this.touchEndY - this.touchStartY <= -this.distance && this.touchTime < 10) {
						// 下一页
						if(this.originIndex == this.originData.length - 1) {
							// 到底了
							this.isVideoToEnd = true
							this.isShowRecommend = true
						} else {
							this.changeCurrent('next')
						}
					}
					// 向下滑动
					if (this.touchEndY - this.touchStartY >= this.distance && this.touchTime < 10) {
						// 上一页
						if(this.originIndex == 0) {
							// 到顶了
							this.$refs.uNotify.show({
								top: 0,
								type: 'error',
								color: '#fff',
								bgColor: 'rgba(0, 0, 0, 0.5)',
								message: '到顶了',
								duration: 1000 * 3,
								fontSize: '32rpx',
								safeAreaInsetTop: true
							})
						} else {
							this.changeCurrent('prev')
						}
					}
				} else if (moveX > 2 * moveY) {
					// 左右
					if (this.direction != 'all' && this.direction != 'horizontal') return;
					if (this.touchEndX - this.touchStartX <= -this.distance && this.touchTime < 10) {
						// 向左
					}
					if (this.touchEndX - this.touchStartX >= this.distance && this.touchTime < 10) {
						// 向右
					}
				}
				clearInterval(this.touchInterval); // 清除setInterval
				this.touchTime = 0;
			},
			// 保存视频进度
			saveVideoProgress() {
				if(!this.token) return
				if(!this.isNeedToPay) {
					const obj = {
						vid: this.videoInfo.id,
						episode_id: this.videoData[this.videoIndex].id,
						type: 'log',
						view_time: this.currentTime
					}
					this.getApp.$request('video.addRecord', obj, false)
				}
			},
			// 选集
			changeOriginIndex(index) {
				this.originIndex = index
				this.initSwiperData(index)
				this.isVideoToEnd && (this.isVideoToEnd = !this.isVideoToEnd)
			},
			// 获取节目单
			getVideoMenu() {
				this.getApp.$request('video.menu', { id: this.videoInfo.id }).then(res => {
					if(res.code === 1) {
						this.videoInfo.title = res.data.title
						this.videoInfo.cover = res.data.image
						this.videoInfo.length = res.data.episodes
						this.videoInfo.collect = res.data.favorites
						this.videoInfo.isCollect = res.data.is_favorite
						this.videoInfo.share = res.data.shares
						
						if(res.data.episodes_list && res.data.episodes_list.length) {
							this.prevTime = res.data.view_time
							
							const index = res.data.episode_id ? res.data.episodes_list.findIndex(item => item.id == res.data.episode_id) : 0
							this.originIndex = index != -1 ? index : 0
							this.originData = res.data.episodes_list
							
							this.initSwiperData()
							
							this.isLoading = false
						}
					}
				})
			},
			// 初始化swiper数据
			initSwiperData(originIndex = this.originIndex) {
				const originDataLength = this.originData.length;
				const videoList = [];
				videoList[this.videoIndex] = this.originData[originIndex];
				videoList[this.videoIndex - 1 == -1 ? 2 : this.videoIndex - 1] = this.originData[originIndex - 1 == -1 ? originDataLength - 1 : originIndex - 1];
				videoList[this.videoIndex + 1 == 3 ? 0 : this.videoIndex + 1] = this.originData[originIndex + 1 == originDataLength ? 0 : originIndex + 1];
				this.videoData = videoList;
				
				if (this.oldIndex >= this.originData.length) {
					this.oldIndex = 0
				}
				if (this.oldIndex < 0) {
					this.oldIndex = this.originData.length - 1
				}
				
				// 重置进度条状态
				this.duration = 0
				this.currentTime = 0
				this.isDrag = false
				this.isPlayError = false
				// 本集价格
				this.currentPrice = Number(this.videoData[this.videoIndex].price)
				// 播放授权
				if(this.videoData[this.videoIndex].url) {
					this.isNeedToPay = false
					this.saveVideoProgress()
				} else {
					
					this.beforePlay()
				}
			},
			// swiper切换
			swiperChange(event) {
				const { current } = event.detail;
				const originDataLength = this.originData.length;
				if (this.videoIndex - current == 2 || this.videoIndex - current == -1) {
					this.originIndex = this.originIndex + 1 == originDataLength ? 0 : this.originIndex + 1;
					this.videoIndex = this.videoIndex + 1 == 3 ? 0 : this.videoIndex + 1;
					this.oldIndex = this.originIndex - 1
					this.initSwiperData(this.originIndex);
				} else if (this.videoIndex - current == -2 || this.videoIndex - current == 1) {
					this.originIndex = this.originIndex - 1 == -1 ? originDataLength - 1 : this.originIndex - 1;
					this.videoIndex = this.videoIndex - 1 == -1 ? 2 : this.videoIndex - 1;
					this.oldIndex = this.originIndex + 1
					this.initSwiperData(this.originIndex);
				}
			},
			// 手动解锁剧情
			unlockPlot() {
				this.beforePlay()
			},
			// 播放之前
			beforePlay() {
				const obj = {
					vid: this.videoInfo.id,
					episode_id: this.videoData[this.videoIndex].id,
					platform: this.getApp.$utils.platforms()
				}
				
				this.getApp.$request('video.play', obj, false).then(res => {
					if(res.code === 1) {
						this.videoData[this.videoIndex].url = res.data.url
						this.isPlayError = false
						this.isNeedToPay = false
						this.isShowPay = false
						this.saveVideoProgress()
					} else {
						
						this.isNeedToPay = true
						this.isShowPay = true
					}
				})
			},
			// 播放
			videoPlay() {
				const video = this.getVideoCtx()
				if(!video) return
				video.play()
				this.isPlaying = true
			},
			// 暂停
			videoPause() {
				const video = this.getVideoCtx()
				if(!video) return
				video.pause()
				this.isPlaying = false
			},
			// 播放结束
			videoEnded(e) {
				if(this.originIndex == this.originData.length - 1) {
					this.isVideoToEnd = true
					this.isShowRecommend = true
				} else {
					this.changeCurrent('next')
				}
			},
			// 视频播放错误
			videoError() {
				this.isPlayError = true
			},
			// 点击
			videoClick(e) {
				this.clickTimer && clearTimeout(this.clickTimer)
				this.clickNum++
				this.clickTimer = setTimeout(() => {
					if(this.clickNum >= 2) {
						// 双击
					} else {
						// 单击
						if(this.isPlaying) {
							this.videoPause()
						} else {
							this.videoPlay()
						}
					}
					this.clickNum = 0
				}, 200)
			},
			// 获取video标签上下文
			getVideoCtx() {
				return uni.createVideoContext('vplayer'+ this.videoIndex, this)
			},
			// 点赞
			handleLikes(id, index) {
				const obj = {
					episode_id: id,
					type: 'like'
				}
				this.getApp.$request('video.likes', obj, false).then(res => {
					if(res.code === 1) {
						this.videoData[index].is_like = this.videoData[index].is_like == 0 ? 1 : 0
						this.videoData[index].likes = res.data.likes
					}
				})
			},
			// 收藏
			handleCollect() {
				if(this.videoInfo.isCollect == 0) {
					const obj = {
						vid: this.videoInfo.id,
						type: 'favorite'
					}
					this.getApp.$request('video.addRecord', obj, false).then(res => {
						if(res.code === 1) {
							this.videoInfo.isCollect = 1
							this.videoInfo.collect = res.data.favorites
						}
					})
				} else {
					const obj = {
						ids: this.videoInfo.id,
						type: 'favorite'
					}
					this.getApp.$request('video.deleteRecord', obj, false).then(res => {
						if(res.code === 1) {
							this.videoInfo.isCollect = 0
							this.videoInfo.collect = res.data.favorites
						}
					})
				}
			},
			// 拖拽结束
			sliderChange(e) {
				const video = this.getVideoCtx()
				if(!video) return
				// 停止拖拽
				this.isDrag = false
				// 判断一下是否大于基础时间
				if (this.duration > 0.1) {
					// 跳到指定时间点
					video.seek(e.detail.value)
					// 并调用播放
					video.play()
				}
			},
			// 正在拖拽
			sliderChanging(e) {
				// 开始拖拽
				this.isDrag = true
				// 刷新时间
				this.dragStarTime = this.getApp.$utils.formatTime(e.detail.value)
				// 总时间
				this.dragEndTime = this.getApp.$utils.formatTime(this.duration)
			},
			// 更新进度
			videoTimeUpdate(e) {
				if(this.isDrag) return
			    const { currentTime, duration } = e.detail
				// 当前进度
				this.currentTime = this.prevTime ? this.prevTime : Math.trunc(currentTime)
				this.duration = Math.trunc(duration)
				// 上次进度
				if(this.prevTime) {
					const video = this.getVideoCtx()
					if(!video) return
					video.seek(this.currentTime)
					this.prevTime = 0
				}
				// 进度文本
				this.dragStarTime = this.getApp.$utils.formatTime(this.currentTime)
				this.dragEndTime = this.getApp.$utils.formatTime(this.duration)
				// 进度条
				this.progressBar = parseInt((currentTime / duration).toFixed(2) * parseInt(this.winWidth))
			}
		}
	}
</script>

<style scoped>
	.safe-padding {
	    padding-bottom: constant(safe-area-inset-bottom);
		padding-bottom: env(safe-area-inset-bottom);
		box-sizing: content-box;
	}
	.page_content {
		flex: 1;
		background: #000;
		position: relative;
		overflow: hidden;
	}
	/* 顶部导航 */
	.page_content .head_content {
		width: 100%;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 1;
	}
	/* 遮罩层 */
	.page_content .vmask {
		width: 750rpx;
		position: absolute;
		top: 0;
		left: 0;
		z-index: 1;
		background: rgba(0, 0, 0, 1);
	}
	.page_content .vmask .bg {
		width: 750rpx;
		flex: 1;
		opacity: 0.3;
	}
	.page_content .vmask .centerinfo {
		width: 750rpx;
		position: absolute;
		top: 0;
		left: 0;
		align-items: center;
		transform: translateY(-50%);
		padding: 0 80rpx;
	}
	.page_content .vmask .centerinfo .text {
		font-size: 32rpx;
		margin-bottom: 30rpx;
		color: #fff;
	}
	.page_content .vmask .centerinfo .btn {
		min-width: 300rpx;
		height: 80rpx;
		line-height: 80rpx;
		border-radius: 80rpx;
		background: #ee7f33;
		text-align: center;
		color: #fff;
		font-size: 32rpx;
		font-weight: 700;
		padding: 0 20rpx;
	}
	.page_content .vmask .centerinfo .btn:active {
		background: rgba(238, 127, 51, 0.8);
	}
	.page_content .vmask.loading {
		background: #000;
	}
	.page_content .vmask.loading .centerinfo .text {
		margin-top: 20rpx;
	}
	.page_content .vmask .infobox {
		width: 750rpx;
		position: absolute;
		bottom: 130rpx;
		left: 0;
		z-index: 1;
	}
	/* 选集 */
	.page_content .infobox {
		width: 750rpx;
		position: absolute;
		bottom: 0;
		left: 0;
		z-index: 1;
		padding: 0 40rpx;
	}
	.page_content .infobox .content {
		height: 100rpx;
		flex-direction: row;
		align-items: center;
	}
	.page_content .infobox .content .left {
		width: 480rpx;
		flex-direction: row;
		align-items: center;
	}
	.page_content .infobox .content .left .text1 {
		flex: 1;
		font-size: 32rpx;
		color: #fff;
		overflow: hidden;
	}
	.page_content .infobox .content .left .text2 {
		font-size: 28rpx;
		color: rgba(255, 255, 255, 0.5);
		margin: 0 40rpx;
		line-height: 48rpx;
	}
	.page_content .infobox .content .right {
		color: #ee7f33;
		margin-left: 20rpx;
		font-size: 32rpx;
	}
	/* 主体 */
	.page_content .main_content {
		flex: 1;
		position: relative;
		background: #000;
		padding-bottom: 100rpx;
	}
	/* 简易轮播 */
	.page_content .main_content .swiper {
		flex: 1;
	}
	.page_content .main_content .swiper .swiper_item {
		position: relative;
	}
	/* 视频 */
	.page_content .main_content .swiper .swiper_item .videos {
		flex: 1;
		position: relative;
	}
	.page_content .main_content .swiper .swiper_item .videos .video {
		flex: 1;
	}
	/* 视频播放错误 */
	.page_content .main_content .swiper .swiper_item .videos .verror {
		width: 750rpx;
		position: absolute;
		top: 0;
		left: 0;
	}
	.page_content .main_content .swiper .swiper_item .videos .verror .image {
		width: 750rpx;
		flex: 1;
		opacity: 0.3;
	}
	.page_content .main_content .swiper .swiper_item .videos .verror .content {
		width: 750rpx;
		position: absolute;
		top: 750rpx;
		left: 0;
		z-index: 1;
		transform: translate(0, -50%);
		align-items: center;
	}
	.page_content .main_content .swiper .swiper_item .videos .verror .content .text {
		font-size: 32rpx;
		color: #fff;
		margin-top: 40rpx;
	}
	/* 封面 */
	.page_content .main_content .swiper .swiper_item .vcover {
		width: 750rpx;
		flex: 1;
	}
	.page_content .main_content .swiper .swiper_item .vcover .image {
		width: 750rpx;
		flex: 1;
		opacity: 0.3;
	}
	/* 播放按钮 */
	.page_content .main_content .swiper .swiper_item .buttons {
		position: absolute;
		top: 750rpx;
		left: 375rpx;
		z-index: 1;
		transform: translate(-50%, -50%);
	}
	/* 侧边栏 */
	.page_content .main_content .swiper .swiper_item .sidebar {
		position: absolute;
		right: 20rpx;
		bottom: 200rpx;
		z-index: 1;
	}
	.page_content .main_content .swiper .swiper_item .sidebar .item {
		margin-bottom: 40rpx;
		align-items: center;
	}
	.page_content .main_content .swiper .swiper_item .sidebar .item:last-child {
		margin-bottom: 0;
	}
	.page_content .main_content .swiper .swiper_item .sidebar .item .image {
		width: 70rpx;
		opacity: 0.9;
	}
	.page_content .main_content .swiper .swiper_item .sidebar .item .text {
		font-size: 28rpx;
		color: #fff;
	}
	.page_content .main_content .swiper .swiper_item .sidebar .item .text.active {
		color: #ee7f33;
	}
	/* 进度条 */
	.page_content .main_content .swiper .swiper_item .progress {
		width: 750rpx;
		position: absolute;
		bottom: 0;
		left: 0;
		z-index: 1;
		background: #333;
	}
	.page_content .main_content .swiper .swiper_item .progress .bar {
		height: 2rpx;
		background: #fff;
	}
</style>